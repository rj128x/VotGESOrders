//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.235
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VotGESOrders
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using VotGESOrders.Web.Services;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace VotGESOrders.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Order' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGESOrders.Web.Models")]
    public sealed partial class Order : Entity
    {
        
        private string _agreeText;
        
        private Dictionary<int, string> _agreeUsersDict;
        
        private string _agreeUsersIDSText;
        
        private bool _allowCancelOrder;
        
        private bool _allowChangeOrder;
        
        private bool _allowCloseOrder;
        
        private bool _allowCompleteOrder;
        
        private bool _allowCompleteWithoutEnterOrder;
        
        private bool _allowExtendOrder;
        
        private bool _allowOpenOrder;
        
        private bool _allowReviewOrder;
        
        private string _cancelText;
        
        private EntityRef<Order> _childOrder;
        
        private double _childOrderNumber;
        
        private string _closeText;
        
        private string _completeText;
        
        private string _createText;
        
        private Nullable<double> _expiredCloseHours;
        
        private Nullable<double> _expiredEnterHours;
        
        private Nullable<double> _expiredOpenHours;
        
        private Nullable<DateTime> _faktCompleteDate;
        
        private Nullable<DateTime> _faktStartDate;
        
        private Nullable<DateTime> _faktStopDate;
        
        private string _fullOrderObjectInfo;
        
        private string _newComment;
        
        private string _openText;
        
        private bool _orderAskExtended;
        
        private bool _orderCanceled;
        
        private bool _orderClosed;
        
        private bool _orderCompleted;
        
        private bool _orderCompletedWithoutEnter;
        
        private bool _orderCreated;
        
        private Nullable<DateTime> _orderDateCancel;
        
        private Nullable<DateTime> _orderDateClose;
        
        private Nullable<DateTime> _orderDateComplete;
        
        private DateTime _orderDateCreate;
        
        private Nullable<DateTime> _orderDateOpen;
        
        private Nullable<DateTime> _orderDateReview;
        
        private bool _orderExtended;
        
        private bool _orderHasChildOrder;
        
        private bool _orderHasParentOrder;
        
        private Nullable<bool> _orderIsExpiredClose;
        
        private Nullable<bool> _orderIsExpiredOpen;
        
        private Nullable<bool> _orderIsExpriredEnter;
        
        private bool _orderIsExtend;
        
        private bool _orderIsFixErrorEnter;
        
        private double _orderNumber;
        
        private string _orderObjectAddInfo;
        
        private bool _orderOpened;
        
        private bool _orderReviewed;
        
        private OrderStateEnum _orderState;
        
        private string _orderStateStr;
        
        private string _orderText;
        
        private OrderTypeEnum _orderType;
        
        private string _orderTypeName;
        
        private string _orderTypeShortName;
        
        private EntityRef<Order> _parentOrder;
        
        private double _parentOrderNumber;
        
        private DateTime _planStartDate;
        
        private DateTime _planStopDate;
        
        private string _readyTime;
        
        private string _reviewText;
        
        private EntityRef<OrderObject> _selOrderObject;
        
        private int _selOrderObjectID;
        
        private string _selOrderObjectText;
        
        private Nullable<double> _timeToClose;
        
        private Nullable<double> _timeToEnter;
        
        private Nullable<double> _timeToOpen;
        
        private EntityRef<OrdersUser> _userCancelOrder;
        
        private int _userCancelOrderID;
        
        private EntityRef<OrdersUser> _userCloseOrder;
        
        private int _userCloseOrderID;
        
        private EntityRef<OrdersUser> _userCompleteOrder;
        
        private int _userCompleteOrderID;
        
        private EntityRef<OrdersUser> _userCreateOrder;
        
        private int _userCreateOrderID;
        
        private EntityRef<OrdersUser> _userOpenOrder;
        
        private int _userOpenOrderID;
        
        private EntityRef<OrdersUser> _userReviewOrder;
        
        private int _userReviewOrderID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgreeTextChanging(string value);
        partial void OnAgreeTextChanged();
        partial void OnAgreeUsersDictChanging(Dictionary<int, string> value);
        partial void OnAgreeUsersDictChanged();
        partial void OnAgreeUsersIDSTextChanging(string value);
        partial void OnAgreeUsersIDSTextChanged();
        partial void OnAllowCancelOrderChanging(bool value);
        partial void OnAllowCancelOrderChanged();
        partial void OnAllowChangeOrderChanging(bool value);
        partial void OnAllowChangeOrderChanged();
        partial void OnAllowCloseOrderChanging(bool value);
        partial void OnAllowCloseOrderChanged();
        partial void OnAllowCompleteOrderChanging(bool value);
        partial void OnAllowCompleteOrderChanged();
        partial void OnAllowCompleteWithoutEnterOrderChanging(bool value);
        partial void OnAllowCompleteWithoutEnterOrderChanged();
        partial void OnAllowExtendOrderChanging(bool value);
        partial void OnAllowExtendOrderChanged();
        partial void OnAllowOpenOrderChanging(bool value);
        partial void OnAllowOpenOrderChanged();
        partial void OnAllowReviewOrderChanging(bool value);
        partial void OnAllowReviewOrderChanged();
        partial void OnCancelTextChanging(string value);
        partial void OnCancelTextChanged();
        partial void OnChildOrderNumberChanging(double value);
        partial void OnChildOrderNumberChanged();
        partial void OnCloseTextChanging(string value);
        partial void OnCloseTextChanged();
        partial void OnCompleteTextChanging(string value);
        partial void OnCompleteTextChanged();
        partial void OnCreateTextChanging(string value);
        partial void OnCreateTextChanged();
        partial void OnExpiredCloseHoursChanging(Nullable<double> value);
        partial void OnExpiredCloseHoursChanged();
        partial void OnExpiredEnterHoursChanging(Nullable<double> value);
        partial void OnExpiredEnterHoursChanged();
        partial void OnExpiredOpenHoursChanging(Nullable<double> value);
        partial void OnExpiredOpenHoursChanged();
        partial void OnFaktCompleteDateChanging(Nullable<DateTime> value);
        partial void OnFaktCompleteDateChanged();
        partial void OnFaktStartDateChanging(Nullable<DateTime> value);
        partial void OnFaktStartDateChanged();
        partial void OnFaktStopDateChanging(Nullable<DateTime> value);
        partial void OnFaktStopDateChanged();
        partial void OnFullOrderObjectInfoChanging(string value);
        partial void OnFullOrderObjectInfoChanged();
        partial void OnNewCommentChanging(string value);
        partial void OnNewCommentChanged();
        partial void OnOpenTextChanging(string value);
        partial void OnOpenTextChanged();
        partial void OnOrderAskExtendedChanging(bool value);
        partial void OnOrderAskExtendedChanged();
        partial void OnOrderCanceledChanging(bool value);
        partial void OnOrderCanceledChanged();
        partial void OnOrderClosedChanging(bool value);
        partial void OnOrderClosedChanged();
        partial void OnOrderCompletedChanging(bool value);
        partial void OnOrderCompletedChanged();
        partial void OnOrderCompletedWithoutEnterChanging(bool value);
        partial void OnOrderCompletedWithoutEnterChanged();
        partial void OnOrderCreatedChanging(bool value);
        partial void OnOrderCreatedChanged();
        partial void OnOrderDateCancelChanging(Nullable<DateTime> value);
        partial void OnOrderDateCancelChanged();
        partial void OnOrderDateCloseChanging(Nullable<DateTime> value);
        partial void OnOrderDateCloseChanged();
        partial void OnOrderDateCompleteChanging(Nullable<DateTime> value);
        partial void OnOrderDateCompleteChanged();
        partial void OnOrderDateCreateChanging(DateTime value);
        partial void OnOrderDateCreateChanged();
        partial void OnOrderDateOpenChanging(Nullable<DateTime> value);
        partial void OnOrderDateOpenChanged();
        partial void OnOrderDateReviewChanging(Nullable<DateTime> value);
        partial void OnOrderDateReviewChanged();
        partial void OnOrderExtendedChanging(bool value);
        partial void OnOrderExtendedChanged();
        partial void OnOrderHasChildOrderChanging(bool value);
        partial void OnOrderHasChildOrderChanged();
        partial void OnOrderHasParentOrderChanging(bool value);
        partial void OnOrderHasParentOrderChanged();
        partial void OnOrderIsExpiredCloseChanging(Nullable<bool> value);
        partial void OnOrderIsExpiredCloseChanged();
        partial void OnOrderIsExpiredOpenChanging(Nullable<bool> value);
        partial void OnOrderIsExpiredOpenChanged();
        partial void OnOrderIsExpriredEnterChanging(Nullable<bool> value);
        partial void OnOrderIsExpriredEnterChanged();
        partial void OnOrderIsExtendChanging(bool value);
        partial void OnOrderIsExtendChanged();
        partial void OnOrderIsFixErrorEnterChanging(bool value);
        partial void OnOrderIsFixErrorEnterChanged();
        partial void OnOrderNumberChanging(double value);
        partial void OnOrderNumberChanged();
        partial void OnOrderObjectAddInfoChanging(string value);
        partial void OnOrderObjectAddInfoChanged();
        partial void OnOrderOpenedChanging(bool value);
        partial void OnOrderOpenedChanged();
        partial void OnOrderReviewedChanging(bool value);
        partial void OnOrderReviewedChanged();
        partial void OnOrderStateChanging(OrderStateEnum value);
        partial void OnOrderStateChanged();
        partial void OnOrderStateStrChanging(string value);
        partial void OnOrderStateStrChanged();
        partial void OnOrderTextChanging(string value);
        partial void OnOrderTextChanged();
        partial void OnOrderTypeChanging(OrderTypeEnum value);
        partial void OnOrderTypeChanged();
        partial void OnOrderTypeNameChanging(string value);
        partial void OnOrderTypeNameChanged();
        partial void OnOrderTypeShortNameChanging(string value);
        partial void OnOrderTypeShortNameChanged();
        partial void OnParentOrderNumberChanging(double value);
        partial void OnParentOrderNumberChanged();
        partial void OnPlanStartDateChanging(DateTime value);
        partial void OnPlanStartDateChanged();
        partial void OnPlanStopDateChanging(DateTime value);
        partial void OnPlanStopDateChanged();
        partial void OnReadyTimeChanging(string value);
        partial void OnReadyTimeChanged();
        partial void OnReviewTextChanging(string value);
        partial void OnReviewTextChanged();
        partial void OnSelOrderObjectIDChanging(int value);
        partial void OnSelOrderObjectIDChanged();
        partial void OnSelOrderObjectTextChanging(string value);
        partial void OnSelOrderObjectTextChanged();
        partial void OnTimeToCloseChanging(Nullable<double> value);
        partial void OnTimeToCloseChanged();
        partial void OnTimeToEnterChanging(Nullable<double> value);
        partial void OnTimeToEnterChanged();
        partial void OnTimeToOpenChanging(Nullable<double> value);
        partial void OnTimeToOpenChanged();
        partial void OnUserCancelOrderIDChanging(int value);
        partial void OnUserCancelOrderIDChanged();
        partial void OnUserCloseOrderIDChanging(int value);
        partial void OnUserCloseOrderIDChanged();
        partial void OnUserCompleteOrderIDChanging(int value);
        partial void OnUserCompleteOrderIDChanged();
        partial void OnUserCreateOrderIDChanging(int value);
        partial void OnUserCreateOrderIDChanged();
        partial void OnUserOpenOrderIDChanging(int value);
        partial void OnUserOpenOrderIDChanged();
        partial void OnUserReviewOrderIDChanging(int value);
        partial void OnUserReviewOrderIDChanged();
        partial void OnRegisterAcceptOrderInvoking(Guid guid);
        partial void OnRegisterAcceptOrderInvoked();
        partial void OnRegisterBanOrderInvoking(Guid guid);
        partial void OnRegisterBanOrderInvoked();
        partial void OnRegisterCancelOrderInvoking(Guid guid);
        partial void OnRegisterCancelOrderInvoked();
        partial void OnRegisterChangeOrderInvoking(Guid guid);
        partial void OnRegisterChangeOrderInvoked();
        partial void OnRegisterCloseOrderInvoking(Guid guid);
        partial void OnRegisterCloseOrderInvoked();
        partial void OnRegisterCompleteOrderInvoking(Guid guid);
        partial void OnRegisterCompleteOrderInvoked();
        partial void OnRegisterNewInvoking(Guid guid);
        partial void OnRegisterNewInvoked();
        partial void OnRegisterOpenOrderInvoking(Guid guid);
        partial void OnRegisterOpenOrderInvoked();
        partial void OnReloadOrderInvoking(Guid guid);
        partial void OnReloadOrderInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Order"/> class.
        /// </summary>
        public Order()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AgreeText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="С кем согласована заявка", ShortName="Согласование")]
        [RegularExpression(".{1,}", ErrorMessage="Согласование")]
        [Required(ErrorMessage="Согласование - обязательное поле")]
        [StringLength(250, ErrorMessage="Согласование - Максимум 250 символов")]
        public string AgreeText
        {
            get
            {
                return this._agreeText;
            }
            set
            {
                if ((this._agreeText != value))
                {
                    this.OnAgreeTextChanging(value);
                    this.RaiseDataMemberChanging("AgreeText");
                    this.ValidateProperty("AgreeText", value);
                    this._agreeText = value;
                    this.RaiseDataMemberChanged("AgreeText");
                    this.OnAgreeTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgreeUsersDict' value.
        /// </summary>
        [DataMember()]
        public Dictionary<int, string> AgreeUsersDict
        {
            get
            {
                return this._agreeUsersDict;
            }
            set
            {
                if ((this._agreeUsersDict != value))
                {
                    this.OnAgreeUsersDictChanging(value);
                    this.RaiseDataMemberChanging("AgreeUsersDict");
                    this.ValidateProperty("AgreeUsersDict", value);
                    this._agreeUsersDict = value;
                    this.RaiseDataMemberChanged("AgreeUsersDict");
                    this.OnAgreeUsersDictChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgreeUsersIDSText' value.
        /// </summary>
        [DataMember()]
        public string AgreeUsersIDSText
        {
            get
            {
                return this._agreeUsersIDSText;
            }
            set
            {
                if ((this._agreeUsersIDSText != value))
                {
                    this.OnAgreeUsersIDSTextChanging(value);
                    this.RaiseDataMemberChanging("AgreeUsersIDSText");
                    this.ValidateProperty("AgreeUsersIDSText", value);
                    this._agreeUsersIDSText = value;
                    this.RaiseDataMemberChanged("AgreeUsersIDSText");
                    this.OnAgreeUsersIDSTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCancelOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowCancelOrder
        {
            get
            {
                return this._allowCancelOrder;
            }
            set
            {
                if ((this._allowCancelOrder != value))
                {
                    this.OnAllowCancelOrderChanging(value);
                    this.ValidateProperty("AllowCancelOrder", value);
                    this._allowCancelOrder = value;
                    this.RaisePropertyChanged("AllowCancelOrder");
                    this.OnAllowCancelOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowChangeOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowChangeOrder
        {
            get
            {
                return this._allowChangeOrder;
            }
            set
            {
                if ((this._allowChangeOrder != value))
                {
                    this.OnAllowChangeOrderChanging(value);
                    this.ValidateProperty("AllowChangeOrder", value);
                    this._allowChangeOrder = value;
                    this.RaisePropertyChanged("AllowChangeOrder");
                    this.OnAllowChangeOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCloseOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowCloseOrder
        {
            get
            {
                return this._allowCloseOrder;
            }
            set
            {
                if ((this._allowCloseOrder != value))
                {
                    this.OnAllowCloseOrderChanging(value);
                    this.ValidateProperty("AllowCloseOrder", value);
                    this._allowCloseOrder = value;
                    this.RaisePropertyChanged("AllowCloseOrder");
                    this.OnAllowCloseOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCompleteOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowCompleteOrder
        {
            get
            {
                return this._allowCompleteOrder;
            }
            set
            {
                if ((this._allowCompleteOrder != value))
                {
                    this.OnAllowCompleteOrderChanging(value);
                    this.ValidateProperty("AllowCompleteOrder", value);
                    this._allowCompleteOrder = value;
                    this.RaisePropertyChanged("AllowCompleteOrder");
                    this.OnAllowCompleteOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCompleteWithoutEnterOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowCompleteWithoutEnterOrder
        {
            get
            {
                return this._allowCompleteWithoutEnterOrder;
            }
            set
            {
                if ((this._allowCompleteWithoutEnterOrder != value))
                {
                    this.OnAllowCompleteWithoutEnterOrderChanging(value);
                    this.ValidateProperty("AllowCompleteWithoutEnterOrder", value);
                    this._allowCompleteWithoutEnterOrder = value;
                    this.RaisePropertyChanged("AllowCompleteWithoutEnterOrder");
                    this.OnAllowCompleteWithoutEnterOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowExtendOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowExtendOrder
        {
            get
            {
                return this._allowExtendOrder;
            }
            set
            {
                if ((this._allowExtendOrder != value))
                {
                    this.OnAllowExtendOrderChanging(value);
                    this.ValidateProperty("AllowExtendOrder", value);
                    this._allowExtendOrder = value;
                    this.RaisePropertyChanged("AllowExtendOrder");
                    this.OnAllowExtendOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowOpenOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowOpenOrder
        {
            get
            {
                return this._allowOpenOrder;
            }
            set
            {
                if ((this._allowOpenOrder != value))
                {
                    this.OnAllowOpenOrderChanging(value);
                    this.ValidateProperty("AllowOpenOrder", value);
                    this._allowOpenOrder = value;
                    this.RaisePropertyChanged("AllowOpenOrder");
                    this.OnAllowOpenOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowReviewOrder' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public bool AllowReviewOrder
        {
            get
            {
                return this._allowReviewOrder;
            }
            set
            {
                if ((this._allowReviewOrder != value))
                {
                    this.OnAllowReviewOrderChanging(value);
                    this.ValidateProperty("AllowReviewOrder", value);
                    this._allowReviewOrder = value;
                    this.RaisePropertyChanged("AllowReviewOrder");
                    this.OnAllowReviewOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CancelText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Комментарий к отмене заявки (не обязательно)", ShortName="Комментарий")]
        [StringLength(250, ErrorMessage="Комментарий - Максимум 250 символов")]
        public string CancelText
        {
            get
            {
                return this._cancelText;
            }
            set
            {
                if ((this._cancelText != value))
                {
                    this.OnCancelTextChanging(value);
                    this.RaiseDataMemberChanging("CancelText");
                    this.ValidateProperty("CancelText", value);
                    this._cancelText = value;
                    this.RaiseDataMemberChanged("CancelText");
                    this.OnCancelTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Order"/> entity.
        /// </summary>
        [Association("Order_ChildOrder", "ChildOrderNumber", "OrderNumber")]
        public Order ChildOrder
        {
            get
            {
                if ((this._childOrder == null))
                {
                    this._childOrder = new EntityRef<Order>(this, "ChildOrder", this.FilterChildOrder);
                }
                return this._childOrder.Entity;
            }
            set
            {
                Order previous = this.ChildOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("ChildOrder", value);
                    this._childOrder.Entity = value;
                    this.RaisePropertyChanged("ChildOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChildOrderNumber' value.
        /// </summary>
        [DataMember()]
        public double ChildOrderNumber
        {
            get
            {
                return this._childOrderNumber;
            }
            set
            {
                if ((this._childOrderNumber != value))
                {
                    this.OnChildOrderNumberChanging(value);
                    this.RaiseDataMemberChanging("ChildOrderNumber");
                    this.ValidateProperty("ChildOrderNumber", value);
                    this._childOrderNumber = value;
                    this.RaiseDataMemberChanged("ChildOrderNumber");
                    this.OnChildOrderNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CloseText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Комментарий к разрешению на ввод (не обязательно)", ShortName="Комментарий")]
        [StringLength(250, ErrorMessage="Комментарий - Максимум 250 символов")]
        public string CloseText
        {
            get
            {
                return this._closeText;
            }
            set
            {
                if ((this._closeText != value))
                {
                    this.OnCloseTextChanging(value);
                    this.RaiseDataMemberChanging("CloseText");
                    this.ValidateProperty("CloseText", value);
                    this._closeText = value;
                    this.RaiseDataMemberChanged("CloseText");
                    this.OnCloseTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompleteText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Комментарий к закрытию заявки (не обязательно)", ShortName="Комментарий")]
        [StringLength(250, ErrorMessage="Комментарий - Максимум 250 символов")]
        public string CompleteText
        {
            get
            {
                return this._completeText;
            }
            set
            {
                if ((this._completeText != value))
                {
                    this.OnCompleteTextChanging(value);
                    this.RaiseDataMemberChanging("CompleteText");
                    this.ValidateProperty("CompleteText", value);
                    this._completeText = value;
                    this.RaiseDataMemberChanged("CompleteText");
                    this.OnCompleteTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreateText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Дополнительный комментарий к заявке", ShortName="Комментарий")]
        [StringLength(250, ErrorMessage="Комментарий - Максимум 250 символов")]
        public string CreateText
        {
            get
            {
                return this._createText;
            }
            set
            {
                if ((this._createText != value))
                {
                    this.OnCreateTextChanging(value);
                    this.RaiseDataMemberChanging("CreateText");
                    this.ValidateProperty("CreateText", value);
                    this._createText = value;
                    this.RaiseDataMemberChanged("CreateText");
                    this.OnCreateTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpiredCloseHours' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ExpiredCloseHours
        {
            get
            {
                return this._expiredCloseHours;
            }
            set
            {
                if ((this._expiredCloseHours != value))
                {
                    this.OnExpiredCloseHoursChanging(value);
                    this.RaiseDataMemberChanging("ExpiredCloseHours");
                    this.ValidateProperty("ExpiredCloseHours", value);
                    this._expiredCloseHours = value;
                    this.RaiseDataMemberChanged("ExpiredCloseHours");
                    this.OnExpiredCloseHoursChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpiredEnterHours' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ExpiredEnterHours
        {
            get
            {
                return this._expiredEnterHours;
            }
            set
            {
                if ((this._expiredEnterHours != value))
                {
                    this.OnExpiredEnterHoursChanging(value);
                    this.RaiseDataMemberChanging("ExpiredEnterHours");
                    this.ValidateProperty("ExpiredEnterHours", value);
                    this._expiredEnterHours = value;
                    this.RaiseDataMemberChanged("ExpiredEnterHours");
                    this.OnExpiredEnterHoursChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpiredOpenHours' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ExpiredOpenHours
        {
            get
            {
                return this._expiredOpenHours;
            }
            set
            {
                if ((this._expiredOpenHours != value))
                {
                    this.OnExpiredOpenHoursChanging(value);
                    this.RaiseDataMemberChanging("ExpiredOpenHours");
                    this.ValidateProperty("ExpiredOpenHours", value);
                    this._expiredOpenHours = value;
                    this.RaiseDataMemberChanged("ExpiredOpenHours");
                    this.OnExpiredOpenHoursChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaktCompleteDate' value.
        /// </summary>
        [CustomValidation(typeof(OrderValidator), "ValidateFaktCompleteDate", ErrorMessage="Ошибка")]
        [CustomValidation(typeof(OrderValidator), "ValidateFutureDate", ErrorMessage="Ошибка")]
        [DataMember()]
        [Display(ShortName="Ввод в работу")]
        public Nullable<DateTime> FaktCompleteDate
        {
            get
            {
                return this._faktCompleteDate;
            }
            set
            {
                if ((this._faktCompleteDate != value))
                {
                    this.OnFaktCompleteDateChanging(value);
                    this.RaiseDataMemberChanging("FaktCompleteDate");
                    this.ValidateProperty("FaktCompleteDate", value);
                    this._faktCompleteDate = value;
                    this.RaiseDataMemberChanged("FaktCompleteDate");
                    this.OnFaktCompleteDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaktStartDate' value.
        /// </summary>
        [CustomValidation(typeof(OrderValidator), "ValidateFaktStartDate", ErrorMessage="Ошибка")]
        [CustomValidation(typeof(OrderValidator), "ValidateFutureDate", ErrorMessage="Ошибка")]
        [DataMember()]
        [Display(ShortName="Фактическое начало")]
        public Nullable<DateTime> FaktStartDate
        {
            get
            {
                return this._faktStartDate;
            }
            set
            {
                if ((this._faktStartDate != value))
                {
                    this.OnFaktStartDateChanging(value);
                    this.RaiseDataMemberChanging("FaktStartDate");
                    this.ValidateProperty("FaktStartDate", value);
                    this._faktStartDate = value;
                    this.RaiseDataMemberChanged("FaktStartDate");
                    this.OnFaktStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaktStopDate' value.
        /// </summary>
        [CustomValidation(typeof(OrderValidator), "ValidateFaktStopDate", ErrorMessage="Ошибка")]
        [CustomValidation(typeof(OrderValidator), "ValidateFutureDate", ErrorMessage="Ошибка")]
        [DataMember()]
        [Display(ShortName="Разрешение на ввод")]
        public Nullable<DateTime> FaktStopDate
        {
            get
            {
                return this._faktStopDate;
            }
            set
            {
                if ((this._faktStopDate != value))
                {
                    this.OnFaktStopDateChanging(value);
                    this.RaiseDataMemberChanging("FaktStopDate");
                    this.ValidateProperty("FaktStopDate", value);
                    this._faktStopDate = value;
                    this.RaiseDataMemberChanged("FaktStopDate");
                    this.OnFaktStopDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullOrderObjectInfo' value.
        /// </summary>
        [DataMember()]
        public string FullOrderObjectInfo
        {
            get
            {
                return this._fullOrderObjectInfo;
            }
            set
            {
                if ((this._fullOrderObjectInfo != value))
                {
                    this.OnFullOrderObjectInfoChanging(value);
                    this.RaiseDataMemberChanging("FullOrderObjectInfo");
                    this.ValidateProperty("FullOrderObjectInfo", value);
                    this._fullOrderObjectInfo = value;
                    this.RaiseDataMemberChanged("FullOrderObjectInfo");
                    this.OnFullOrderObjectInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewComment' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Комментарий (не обязательно)")]
        public string NewComment
        {
            get
            {
                return this._newComment;
            }
            set
            {
                if ((this._newComment != value))
                {
                    this.OnNewCommentChanging(value);
                    this.RaiseDataMemberChanging("NewComment");
                    this.ValidateProperty("NewComment", value);
                    this._newComment = value;
                    this.RaiseDataMemberChanged("NewComment");
                    this.OnNewCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Комментарий к выводу оборудования (не обязательно)", ShortName="Комментарий")]
        [StringLength(250, ErrorMessage="Комментарий - Максимум 250 символов")]
        public string OpenText
        {
            get
            {
                return this._openText;
            }
            set
            {
                if ((this._openText != value))
                {
                    this.OnOpenTextChanging(value);
                    this.RaiseDataMemberChanging("OpenText");
                    this.ValidateProperty("OpenText", value);
                    this._openText = value;
                    this.RaiseDataMemberChanged("OpenText");
                    this.OnOpenTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderAskExtended' value.
        /// </summary>
        [DataMember()]
        public bool OrderAskExtended
        {
            get
            {
                return this._orderAskExtended;
            }
            set
            {
                if ((this._orderAskExtended != value))
                {
                    this.OnOrderAskExtendedChanging(value);
                    this.RaiseDataMemberChanging("OrderAskExtended");
                    this.ValidateProperty("OrderAskExtended", value);
                    this._orderAskExtended = value;
                    this.RaiseDataMemberChanged("OrderAskExtended");
                    this.OnOrderAskExtendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderCanceled' value.
        /// </summary>
        [DataMember()]
        public bool OrderCanceled
        {
            get
            {
                return this._orderCanceled;
            }
            set
            {
                if ((this._orderCanceled != value))
                {
                    this.OnOrderCanceledChanging(value);
                    this.RaiseDataMemberChanging("OrderCanceled");
                    this.ValidateProperty("OrderCanceled", value);
                    this._orderCanceled = value;
                    this.RaiseDataMemberChanged("OrderCanceled");
                    this.OnOrderCanceledChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderClosed' value.
        /// </summary>
        [DataMember()]
        public bool OrderClosed
        {
            get
            {
                return this._orderClosed;
            }
            set
            {
                if ((this._orderClosed != value))
                {
                    this.OnOrderClosedChanging(value);
                    this.RaiseDataMemberChanging("OrderClosed");
                    this.ValidateProperty("OrderClosed", value);
                    this._orderClosed = value;
                    this.RaiseDataMemberChanged("OrderClosed");
                    this.OnOrderClosedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderCompleted' value.
        /// </summary>
        [DataMember()]
        public bool OrderCompleted
        {
            get
            {
                return this._orderCompleted;
            }
            set
            {
                if ((this._orderCompleted != value))
                {
                    this.OnOrderCompletedChanging(value);
                    this.RaiseDataMemberChanging("OrderCompleted");
                    this.ValidateProperty("OrderCompleted", value);
                    this._orderCompleted = value;
                    this.RaiseDataMemberChanged("OrderCompleted");
                    this.OnOrderCompletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderCompletedWithoutEnter' value.
        /// </summary>
        [DataMember()]
        public bool OrderCompletedWithoutEnter
        {
            get
            {
                return this._orderCompletedWithoutEnter;
            }
            set
            {
                if ((this._orderCompletedWithoutEnter != value))
                {
                    this.OnOrderCompletedWithoutEnterChanging(value);
                    this.RaiseDataMemberChanging("OrderCompletedWithoutEnter");
                    this.ValidateProperty("OrderCompletedWithoutEnter", value);
                    this._orderCompletedWithoutEnter = value;
                    this.RaiseDataMemberChanged("OrderCompletedWithoutEnter");
                    this.OnOrderCompletedWithoutEnterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderCreated' value.
        /// </summary>
        [DataMember()]
        public bool OrderCreated
        {
            get
            {
                return this._orderCreated;
            }
            set
            {
                if ((this._orderCreated != value))
                {
                    this.OnOrderCreatedChanging(value);
                    this.RaiseDataMemberChanging("OrderCreated");
                    this.ValidateProperty("OrderCreated", value);
                    this._orderCreated = value;
                    this.RaiseDataMemberChanged("OrderCreated");
                    this.OnOrderCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDateCancel' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OrderDateCancel
        {
            get
            {
                return this._orderDateCancel;
            }
            set
            {
                if ((this._orderDateCancel != value))
                {
                    this.OnOrderDateCancelChanging(value);
                    this.RaiseDataMemberChanging("OrderDateCancel");
                    this.ValidateProperty("OrderDateCancel", value);
                    this._orderDateCancel = value;
                    this.RaiseDataMemberChanged("OrderDateCancel");
                    this.OnOrderDateCancelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDateClose' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OrderDateClose
        {
            get
            {
                return this._orderDateClose;
            }
            set
            {
                if ((this._orderDateClose != value))
                {
                    this.OnOrderDateCloseChanging(value);
                    this.RaiseDataMemberChanging("OrderDateClose");
                    this.ValidateProperty("OrderDateClose", value);
                    this._orderDateClose = value;
                    this.RaiseDataMemberChanged("OrderDateClose");
                    this.OnOrderDateCloseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDateComplete' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OrderDateComplete
        {
            get
            {
                return this._orderDateComplete;
            }
            set
            {
                if ((this._orderDateComplete != value))
                {
                    this.OnOrderDateCompleteChanging(value);
                    this.RaiseDataMemberChanging("OrderDateComplete");
                    this.ValidateProperty("OrderDateComplete", value);
                    this._orderDateComplete = value;
                    this.RaiseDataMemberChanged("OrderDateComplete");
                    this.OnOrderDateCompleteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDateCreate' value.
        /// </summary>
        [DataMember()]
        public DateTime OrderDateCreate
        {
            get
            {
                return this._orderDateCreate;
            }
            set
            {
                if ((this._orderDateCreate != value))
                {
                    this.OnOrderDateCreateChanging(value);
                    this.RaiseDataMemberChanging("OrderDateCreate");
                    this.ValidateProperty("OrderDateCreate", value);
                    this._orderDateCreate = value;
                    this.RaiseDataMemberChanged("OrderDateCreate");
                    this.OnOrderDateCreateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDateOpen' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OrderDateOpen
        {
            get
            {
                return this._orderDateOpen;
            }
            set
            {
                if ((this._orderDateOpen != value))
                {
                    this.OnOrderDateOpenChanging(value);
                    this.RaiseDataMemberChanging("OrderDateOpen");
                    this.ValidateProperty("OrderDateOpen", value);
                    this._orderDateOpen = value;
                    this.RaiseDataMemberChanged("OrderDateOpen");
                    this.OnOrderDateOpenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDateReview' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> OrderDateReview
        {
            get
            {
                return this._orderDateReview;
            }
            set
            {
                if ((this._orderDateReview != value))
                {
                    this.OnOrderDateReviewChanging(value);
                    this.RaiseDataMemberChanging("OrderDateReview");
                    this.ValidateProperty("OrderDateReview", value);
                    this._orderDateReview = value;
                    this.RaiseDataMemberChanged("OrderDateReview");
                    this.OnOrderDateReviewChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderExtended' value.
        /// </summary>
        [DataMember()]
        public bool OrderExtended
        {
            get
            {
                return this._orderExtended;
            }
            set
            {
                if ((this._orderExtended != value))
                {
                    this.OnOrderExtendedChanging(value);
                    this.RaiseDataMemberChanging("OrderExtended");
                    this.ValidateProperty("OrderExtended", value);
                    this._orderExtended = value;
                    this.RaiseDataMemberChanged("OrderExtended");
                    this.OnOrderExtendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderHasChildOrder' value.
        /// </summary>
        [DataMember()]
        public bool OrderHasChildOrder
        {
            get
            {
                return this._orderHasChildOrder;
            }
            set
            {
                if ((this._orderHasChildOrder != value))
                {
                    this.OnOrderHasChildOrderChanging(value);
                    this.RaiseDataMemberChanging("OrderHasChildOrder");
                    this.ValidateProperty("OrderHasChildOrder", value);
                    this._orderHasChildOrder = value;
                    this.RaiseDataMemberChanged("OrderHasChildOrder");
                    this.OnOrderHasChildOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderHasParentOrder' value.
        /// </summary>
        [DataMember()]
        public bool OrderHasParentOrder
        {
            get
            {
                return this._orderHasParentOrder;
            }
            set
            {
                if ((this._orderHasParentOrder != value))
                {
                    this.OnOrderHasParentOrderChanging(value);
                    this.RaiseDataMemberChanging("OrderHasParentOrder");
                    this.ValidateProperty("OrderHasParentOrder", value);
                    this._orderHasParentOrder = value;
                    this.RaiseDataMemberChanged("OrderHasParentOrder");
                    this.OnOrderHasParentOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderIsExpiredClose' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> OrderIsExpiredClose
        {
            get
            {
                return this._orderIsExpiredClose;
            }
            set
            {
                if ((this._orderIsExpiredClose != value))
                {
                    this.OnOrderIsExpiredCloseChanging(value);
                    this.RaiseDataMemberChanging("OrderIsExpiredClose");
                    this.ValidateProperty("OrderIsExpiredClose", value);
                    this._orderIsExpiredClose = value;
                    this.RaiseDataMemberChanged("OrderIsExpiredClose");
                    this.OnOrderIsExpiredCloseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderIsExpiredOpen' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> OrderIsExpiredOpen
        {
            get
            {
                return this._orderIsExpiredOpen;
            }
            set
            {
                if ((this._orderIsExpiredOpen != value))
                {
                    this.OnOrderIsExpiredOpenChanging(value);
                    this.RaiseDataMemberChanging("OrderIsExpiredOpen");
                    this.ValidateProperty("OrderIsExpiredOpen", value);
                    this._orderIsExpiredOpen = value;
                    this.RaiseDataMemberChanged("OrderIsExpiredOpen");
                    this.OnOrderIsExpiredOpenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderIsExpriredEnter' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> OrderIsExpriredEnter
        {
            get
            {
                return this._orderIsExpriredEnter;
            }
            set
            {
                if ((this._orderIsExpriredEnter != value))
                {
                    this.OnOrderIsExpriredEnterChanging(value);
                    this.RaiseDataMemberChanging("OrderIsExpriredEnter");
                    this.ValidateProperty("OrderIsExpriredEnter", value);
                    this._orderIsExpriredEnter = value;
                    this.RaiseDataMemberChanged("OrderIsExpriredEnter");
                    this.OnOrderIsExpriredEnterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderIsExtend' value.
        /// </summary>
        [DataMember()]
        public bool OrderIsExtend
        {
            get
            {
                return this._orderIsExtend;
            }
            set
            {
                if ((this._orderIsExtend != value))
                {
                    this.OnOrderIsExtendChanging(value);
                    this.RaiseDataMemberChanging("OrderIsExtend");
                    this.ValidateProperty("OrderIsExtend", value);
                    this._orderIsExtend = value;
                    this.RaiseDataMemberChanged("OrderIsExtend");
                    this.OnOrderIsExtendChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderIsFixErrorEnter' value.
        /// </summary>
        [DataMember()]
        public bool OrderIsFixErrorEnter
        {
            get
            {
                return this._orderIsFixErrorEnter;
            }
            set
            {
                if ((this._orderIsFixErrorEnter != value))
                {
                    this.OnOrderIsFixErrorEnterChanging(value);
                    this.RaiseDataMemberChanging("OrderIsFixErrorEnter");
                    this.ValidateProperty("OrderIsFixErrorEnter", value);
                    this._orderIsFixErrorEnter = value;
                    this.RaiseDataMemberChanged("OrderIsFixErrorEnter");
                    this.OnOrderIsFixErrorEnterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderNumber' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public double OrderNumber
        {
            get
            {
                return this._orderNumber;
            }
            set
            {
                if ((this._orderNumber != value))
                {
                    this.OnOrderNumberChanging(value);
                    this.ValidateProperty("OrderNumber", value);
                    this._orderNumber = value;
                    this.RaisePropertyChanged("OrderNumber");
                    this.OnOrderNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderObjectAddInfo' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Детализация оборудования (если отсутствует в дереве)", ShortName="Оборудование")]
        [StringLength(100, ErrorMessage="Оборудование - Максимум 100 символов")]
        public string OrderObjectAddInfo
        {
            get
            {
                return this._orderObjectAddInfo;
            }
            set
            {
                if ((this._orderObjectAddInfo != value))
                {
                    this.OnOrderObjectAddInfoChanging(value);
                    this.RaiseDataMemberChanging("OrderObjectAddInfo");
                    this.ValidateProperty("OrderObjectAddInfo", value);
                    this._orderObjectAddInfo = value;
                    this.RaiseDataMemberChanged("OrderObjectAddInfo");
                    this.OnOrderObjectAddInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderOpened' value.
        /// </summary>
        [DataMember()]
        public bool OrderOpened
        {
            get
            {
                return this._orderOpened;
            }
            set
            {
                if ((this._orderOpened != value))
                {
                    this.OnOrderOpenedChanging(value);
                    this.RaiseDataMemberChanging("OrderOpened");
                    this.ValidateProperty("OrderOpened", value);
                    this._orderOpened = value;
                    this.RaiseDataMemberChanged("OrderOpened");
                    this.OnOrderOpenedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderReviewed' value.
        /// </summary>
        [DataMember()]
        public bool OrderReviewed
        {
            get
            {
                return this._orderReviewed;
            }
            set
            {
                if ((this._orderReviewed != value))
                {
                    this.OnOrderReviewedChanging(value);
                    this.RaiseDataMemberChanging("OrderReviewed");
                    this.ValidateProperty("OrderReviewed", value);
                    this._orderReviewed = value;
                    this.RaiseDataMemberChanged("OrderReviewed");
                    this.OnOrderReviewedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderState' value.
        /// </summary>
        [DataMember()]
        public OrderStateEnum OrderState
        {
            get
            {
                return this._orderState;
            }
            set
            {
                if ((this._orderState != value))
                {
                    this.OnOrderStateChanging(value);
                    this.RaiseDataMemberChanging("OrderState");
                    this.ValidateProperty("OrderState", value);
                    this._orderState = value;
                    this.RaiseDataMemberChanged("OrderState");
                    this.OnOrderStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderStateStr' value.
        /// </summary>
        [DataMember()]
        public string OrderStateStr
        {
            get
            {
                return this._orderStateStr;
            }
            set
            {
                if ((this._orderStateStr != value))
                {
                    this.OnOrderStateStrChanging(value);
                    this.RaiseDataMemberChanging("OrderStateStr");
                    this.ValidateProperty("OrderStateStr", value);
                    this._orderStateStr = value;
                    this.RaiseDataMemberChanged("OrderStateStr");
                    this.OnOrderStateStrChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Введите текст заявки (минимум 5 символов)", ShortName="Текст заявки")]
        [RegularExpression(".{5,}", ErrorMessage="Текст заявки - Минимум 5 символов")]
        [Required(ErrorMessage="Текст заявки - обязательное поле")]
        [StringLength(250, ErrorMessage="Текст заявки - Максимум 250 символов")]
        public string OrderText
        {
            get
            {
                return this._orderText;
            }
            set
            {
                if ((this._orderText != value))
                {
                    this.OnOrderTextChanging(value);
                    this.RaiseDataMemberChanging("OrderText");
                    this.ValidateProperty("OrderText", value);
                    this._orderText = value;
                    this.RaiseDataMemberChanged("OrderText");
                    this.OnOrderTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderType' value.
        /// </summary>
        [DataMember()]
        public OrderTypeEnum OrderType
        {
            get
            {
                return this._orderType;
            }
            set
            {
                if ((this._orderType != value))
                {
                    this.OnOrderTypeChanging(value);
                    this.RaiseDataMemberChanging("OrderType");
                    this.ValidateProperty("OrderType", value);
                    this._orderType = value;
                    this.RaiseDataMemberChanged("OrderType");
                    this.OnOrderTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderTypeName' value.
        /// </summary>
        [DataMember()]
        public string OrderTypeName
        {
            get
            {
                return this._orderTypeName;
            }
            set
            {
                if ((this._orderTypeName != value))
                {
                    this.OnOrderTypeNameChanging(value);
                    this.RaiseDataMemberChanging("OrderTypeName");
                    this.ValidateProperty("OrderTypeName", value);
                    this._orderTypeName = value;
                    this.RaiseDataMemberChanged("OrderTypeName");
                    this.OnOrderTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderTypeShortName' value.
        /// </summary>
        [DataMember()]
        public string OrderTypeShortName
        {
            get
            {
                return this._orderTypeShortName;
            }
            set
            {
                if ((this._orderTypeShortName != value))
                {
                    this.OnOrderTypeShortNameChanging(value);
                    this.RaiseDataMemberChanging("OrderTypeShortName");
                    this.ValidateProperty("OrderTypeShortName", value);
                    this._orderTypeShortName = value;
                    this.RaiseDataMemberChanged("OrderTypeShortName");
                    this.OnOrderTypeShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Order"/> entity.
        /// </summary>
        [Association("Order_ParentOrder", "ParentOrderNumber", "OrderNumber")]
        public Order ParentOrder
        {
            get
            {
                if ((this._parentOrder == null))
                {
                    this._parentOrder = new EntityRef<Order>(this, "ParentOrder", this.FilterParentOrder);
                }
                return this._parentOrder.Entity;
            }
            set
            {
                Order previous = this.ParentOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentOrder", value);
                    this._parentOrder.Entity = value;
                    this.RaisePropertyChanged("ParentOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentOrderNumber' value.
        /// </summary>
        [DataMember()]
        public double ParentOrderNumber
        {
            get
            {
                return this._parentOrderNumber;
            }
            set
            {
                if ((this._parentOrderNumber != value))
                {
                    this.OnParentOrderNumberChanging(value);
                    this.RaiseDataMemberChanging("ParentOrderNumber");
                    this.ValidateProperty("ParentOrderNumber", value);
                    this._parentOrderNumber = value;
                    this.RaiseDataMemberChanged("ParentOrderNumber");
                    this.OnParentOrderNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlanStartDate' value.
        /// </summary>
        [CustomValidation(typeof(OrderValidator), "ValidatePlanStartDate", ErrorMessage="Ошибка")]
        [DataMember()]
        [Display(ShortName="Плановое начало")]
        public DateTime PlanStartDate
        {
            get
            {
                return this._planStartDate;
            }
            set
            {
                if ((this._planStartDate != value))
                {
                    this.OnPlanStartDateChanging(value);
                    this.RaiseDataMemberChanging("PlanStartDate");
                    this.ValidateProperty("PlanStartDate", value);
                    this._planStartDate = value;
                    this.RaiseDataMemberChanged("PlanStartDate");
                    this.OnPlanStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlanStopDate' value.
        /// </summary>
        [CustomValidation(typeof(OrderValidator), "ValidatePlanStopDate", ErrorMessage="Ошибка")]
        [DataMember()]
        [Display(ShortName="Плановое окончание")]
        public DateTime PlanStopDate
        {
            get
            {
                return this._planStopDate;
            }
            set
            {
                if ((this._planStopDate != value))
                {
                    this.OnPlanStopDateChanging(value);
                    this.RaiseDataMemberChanging("PlanStopDate");
                    this.ValidateProperty("PlanStopDate", value);
                    this._planStopDate = value;
                    this.RaiseDataMemberChanged("PlanStopDate");
                    this.OnPlanStopDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReadyTime' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Аварийная готовность", ShortName="Аварийная готовность")]
        [RegularExpression(".{5,}", ErrorMessage="Аварийная готовность - Минимум 5 символов")]
        [Required(ErrorMessage="Аварийная готовность - Обязательное поле")]
        [StringLength(50, ErrorMessage="Аварийная готовность - Максимум 50 символов")]
        public string ReadyTime
        {
            get
            {
                return this._readyTime;
            }
            set
            {
                if ((this._readyTime != value))
                {
                    this.OnReadyTimeChanging(value);
                    this.RaiseDataMemberChanging("ReadyTime");
                    this.ValidateProperty("ReadyTime", value);
                    this._readyTime = value;
                    this.RaiseDataMemberChanged("ReadyTime");
                    this.OnReadyTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReviewText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Комментарий к разрешению (не обязательно)", ShortName="Комментарий")]
        [StringLength(250, ErrorMessage="Комментарий - Максимум 250 символов")]
        public string ReviewText
        {
            get
            {
                return this._reviewText;
            }
            set
            {
                if ((this._reviewText != value))
                {
                    this.OnReviewTextChanging(value);
                    this.RaiseDataMemberChanging("ReviewText");
                    this.ValidateProperty("ReviewText", value);
                    this._reviewText = value;
                    this.RaiseDataMemberChanged("ReviewText");
                    this.OnReviewTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrderObject"/> entity.
        /// </summary>
        [Association("Order_OrderObject", "SelOrderObjectID", "ObjectID")]
        public OrderObject SelOrderObject
        {
            get
            {
                if ((this._selOrderObject == null))
                {
                    this._selOrderObject = new EntityRef<OrderObject>(this, "SelOrderObject", this.FilterSelOrderObject);
                }
                return this._selOrderObject.Entity;
            }
            set
            {
                OrderObject previous = this.SelOrderObject;
                if ((previous != value))
                {
                    this.ValidateProperty("SelOrderObject", value);
                    this._selOrderObject.Entity = value;
                    this.RaisePropertyChanged("SelOrderObject");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SelOrderObjectID' value.
        /// </summary>
        [DataMember()]
        public int SelOrderObjectID
        {
            get
            {
                return this._selOrderObjectID;
            }
            set
            {
                if ((this._selOrderObjectID != value))
                {
                    this.OnSelOrderObjectIDChanging(value);
                    this.RaiseDataMemberChanging("SelOrderObjectID");
                    this.ValidateProperty("SelOrderObjectID", value);
                    this._selOrderObjectID = value;
                    this.RaiseDataMemberChanged("SelOrderObjectID");
                    this.OnSelOrderObjectIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SelOrderObjectText' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Объект оборудования (выбирается из дерева)", ShortName="Оборудование")]
        [RegularExpression(".{1,}", ErrorMessage="Выберите оборудование")]
        [Required(ErrorMessage="Оборудование - Обязательное поле")]
        public string SelOrderObjectText
        {
            get
            {
                return this._selOrderObjectText;
            }
            set
            {
                if ((this._selOrderObjectText != value))
                {
                    this.OnSelOrderObjectTextChanging(value);
                    this.RaiseDataMemberChanging("SelOrderObjectText");
                    this.ValidateProperty("SelOrderObjectText", value);
                    this._selOrderObjectText = value;
                    this.RaiseDataMemberChanged("SelOrderObjectText");
                    this.OnSelOrderObjectTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeToClose' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> TimeToClose
        {
            get
            {
                return this._timeToClose;
            }
            set
            {
                if ((this._timeToClose != value))
                {
                    this.OnTimeToCloseChanging(value);
                    this.RaiseDataMemberChanging("TimeToClose");
                    this.ValidateProperty("TimeToClose", value);
                    this._timeToClose = value;
                    this.RaiseDataMemberChanged("TimeToClose");
                    this.OnTimeToCloseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeToEnter' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> TimeToEnter
        {
            get
            {
                return this._timeToEnter;
            }
            set
            {
                if ((this._timeToEnter != value))
                {
                    this.OnTimeToEnterChanging(value);
                    this.RaiseDataMemberChanging("TimeToEnter");
                    this.ValidateProperty("TimeToEnter", value);
                    this._timeToEnter = value;
                    this.RaiseDataMemberChanged("TimeToEnter");
                    this.OnTimeToEnterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeToOpen' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> TimeToOpen
        {
            get
            {
                return this._timeToOpen;
            }
            set
            {
                if ((this._timeToOpen != value))
                {
                    this.OnTimeToOpenChanging(value);
                    this.RaiseDataMemberChanging("TimeToOpen");
                    this.ValidateProperty("TimeToOpen", value);
                    this._timeToOpen = value;
                    this.RaiseDataMemberChanged("TimeToOpen");
                    this.OnTimeToOpenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrdersUser"/> entity.
        /// </summary>
        [Association("Order_UserCancel", "UserCancelOrderID", "UserID")]
        public OrdersUser UserCancelOrder
        {
            get
            {
                if ((this._userCancelOrder == null))
                {
                    this._userCancelOrder = new EntityRef<OrdersUser>(this, "UserCancelOrder", this.FilterUserCancelOrder);
                }
                return this._userCancelOrder.Entity;
            }
            set
            {
                OrdersUser previous = this.UserCancelOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("UserCancelOrder", value);
                    this._userCancelOrder.Entity = value;
                    this.RaisePropertyChanged("UserCancelOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCancelOrderID' value.
        /// </summary>
        [DataMember()]
        public int UserCancelOrderID
        {
            get
            {
                return this._userCancelOrderID;
            }
            set
            {
                if ((this._userCancelOrderID != value))
                {
                    this.OnUserCancelOrderIDChanging(value);
                    this.RaiseDataMemberChanging("UserCancelOrderID");
                    this.ValidateProperty("UserCancelOrderID", value);
                    this._userCancelOrderID = value;
                    this.RaiseDataMemberChanged("UserCancelOrderID");
                    this.OnUserCancelOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrdersUser"/> entity.
        /// </summary>
        [Association("Order_UserClose", "UserCloseOrderID", "UserID")]
        public OrdersUser UserCloseOrder
        {
            get
            {
                if ((this._userCloseOrder == null))
                {
                    this._userCloseOrder = new EntityRef<OrdersUser>(this, "UserCloseOrder", this.FilterUserCloseOrder);
                }
                return this._userCloseOrder.Entity;
            }
            set
            {
                OrdersUser previous = this.UserCloseOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("UserCloseOrder", value);
                    this._userCloseOrder.Entity = value;
                    this.RaisePropertyChanged("UserCloseOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCloseOrderID' value.
        /// </summary>
        [DataMember()]
        public int UserCloseOrderID
        {
            get
            {
                return this._userCloseOrderID;
            }
            set
            {
                if ((this._userCloseOrderID != value))
                {
                    this.OnUserCloseOrderIDChanging(value);
                    this.RaiseDataMemberChanging("UserCloseOrderID");
                    this.ValidateProperty("UserCloseOrderID", value);
                    this._userCloseOrderID = value;
                    this.RaiseDataMemberChanged("UserCloseOrderID");
                    this.OnUserCloseOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrdersUser"/> entity.
        /// </summary>
        [Association("Order_UserEnter", "UserCompleteOrderID", "UserID")]
        public OrdersUser UserCompleteOrder
        {
            get
            {
                if ((this._userCompleteOrder == null))
                {
                    this._userCompleteOrder = new EntityRef<OrdersUser>(this, "UserCompleteOrder", this.FilterUserCompleteOrder);
                }
                return this._userCompleteOrder.Entity;
            }
            set
            {
                OrdersUser previous = this.UserCompleteOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("UserCompleteOrder", value);
                    this._userCompleteOrder.Entity = value;
                    this.RaisePropertyChanged("UserCompleteOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCompleteOrderID' value.
        /// </summary>
        [DataMember()]
        public int UserCompleteOrderID
        {
            get
            {
                return this._userCompleteOrderID;
            }
            set
            {
                if ((this._userCompleteOrderID != value))
                {
                    this.OnUserCompleteOrderIDChanging(value);
                    this.RaiseDataMemberChanging("UserCompleteOrderID");
                    this.ValidateProperty("UserCompleteOrderID", value);
                    this._userCompleteOrderID = value;
                    this.RaiseDataMemberChanged("UserCompleteOrderID");
                    this.OnUserCompleteOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrdersUser"/> entity.
        /// </summary>
        [Association("Order_UserCreate", "UserCreateOrderID", "UserID")]
        public OrdersUser UserCreateOrder
        {
            get
            {
                if ((this._userCreateOrder == null))
                {
                    this._userCreateOrder = new EntityRef<OrdersUser>(this, "UserCreateOrder", this.FilterUserCreateOrder);
                }
                return this._userCreateOrder.Entity;
            }
            set
            {
                OrdersUser previous = this.UserCreateOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("UserCreateOrder", value);
                    this._userCreateOrder.Entity = value;
                    this.RaisePropertyChanged("UserCreateOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCreateOrderID' value.
        /// </summary>
        [DataMember()]
        public int UserCreateOrderID
        {
            get
            {
                return this._userCreateOrderID;
            }
            set
            {
                if ((this._userCreateOrderID != value))
                {
                    this.OnUserCreateOrderIDChanging(value);
                    this.RaiseDataMemberChanging("UserCreateOrderID");
                    this.ValidateProperty("UserCreateOrderID", value);
                    this._userCreateOrderID = value;
                    this.RaiseDataMemberChanged("UserCreateOrderID");
                    this.OnUserCreateOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrdersUser"/> entity.
        /// </summary>
        [Association("Order_UserOpen", "UserOpenOrderID", "UserID")]
        public OrdersUser UserOpenOrder
        {
            get
            {
                if ((this._userOpenOrder == null))
                {
                    this._userOpenOrder = new EntityRef<OrdersUser>(this, "UserOpenOrder", this.FilterUserOpenOrder);
                }
                return this._userOpenOrder.Entity;
            }
            set
            {
                OrdersUser previous = this.UserOpenOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("UserOpenOrder", value);
                    this._userOpenOrder.Entity = value;
                    this.RaisePropertyChanged("UserOpenOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserOpenOrderID' value.
        /// </summary>
        [DataMember()]
        public int UserOpenOrderID
        {
            get
            {
                return this._userOpenOrderID;
            }
            set
            {
                if ((this._userOpenOrderID != value))
                {
                    this.OnUserOpenOrderIDChanging(value);
                    this.RaiseDataMemberChanging("UserOpenOrderID");
                    this.ValidateProperty("UserOpenOrderID", value);
                    this._userOpenOrderID = value;
                    this.RaiseDataMemberChanged("UserOpenOrderID");
                    this.OnUserOpenOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrdersUser"/> entity.
        /// </summary>
        [Association("Order_UserReview", "UserReviewOrderID", "UserID")]
        public OrdersUser UserReviewOrder
        {
            get
            {
                if ((this._userReviewOrder == null))
                {
                    this._userReviewOrder = new EntityRef<OrdersUser>(this, "UserReviewOrder", this.FilterUserReviewOrder);
                }
                return this._userReviewOrder.Entity;
            }
            set
            {
                OrdersUser previous = this.UserReviewOrder;
                if ((previous != value))
                {
                    this.ValidateProperty("UserReviewOrder", value);
                    this._userReviewOrder.Entity = value;
                    this.RaisePropertyChanged("UserReviewOrder");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserReviewOrderID' value.
        /// </summary>
        [DataMember()]
        public int UserReviewOrderID
        {
            get
            {
                return this._userReviewOrderID;
            }
            set
            {
                if ((this._userReviewOrderID != value))
                {
                    this.OnUserReviewOrderIDChanging(value);
                    this.RaiseDataMemberChanging("UserReviewOrderID");
                    this.ValidateProperty("UserReviewOrderID", value);
                    this._userReviewOrderID = value;
                    this.RaiseDataMemberChanged("UserReviewOrderID");
                    this.OnUserReviewOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterAcceptOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterAcceptOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterAcceptOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterAcceptOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterAcceptOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterAcceptOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterBanOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterBanOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterBanOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterBanOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterBanOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterBanOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterCancelOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterCancelOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterCancelOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterCancelOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterCancelOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterCancelOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterChangeOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterChangeOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterChangeOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterChangeOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterChangeOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterChangeOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterCloseOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterCloseOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterCloseOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterCloseOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterCloseOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterCloseOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterCompleteOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterCompleteOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterCompleteOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterCompleteOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterCompleteOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterCompleteOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterNew' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterNewInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterNew");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterNew' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterNew
        {
            get
            {
                return base.CanInvokeAction("RegisterNew");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterOpenOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterOpenOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterOpenOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterOpenOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterOpenOrder
        {
            get
            {
                return base.CanInvokeAction("RegisterOpenOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ReloadOrder' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsReloadOrderInvoked
        {
            get
            {
                return base.IsActionInvoked("ReloadOrder");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'ReloadOrder' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanReloadOrder
        {
            get
            {
                return base.CanInvokeAction("ReloadOrder");
            }
        }
        
        private bool FilterChildOrder(Order entity)
        {
            return (entity.OrderNumber == this.ChildOrderNumber);
        }
        
        private bool FilterParentOrder(Order entity)
        {
            return (entity.OrderNumber == this.ParentOrderNumber);
        }
        
        private bool FilterSelOrderObject(OrderObject entity)
        {
            return (entity.ObjectID == this.SelOrderObjectID);
        }
        
        private bool FilterUserCancelOrder(OrdersUser entity)
        {
            return (entity.UserID == this.UserCancelOrderID);
        }
        
        private bool FilterUserCloseOrder(OrdersUser entity)
        {
            return (entity.UserID == this.UserCloseOrderID);
        }
        
        private bool FilterUserCompleteOrder(OrdersUser entity)
        {
            return (entity.UserID == this.UserCompleteOrderID);
        }
        
        private bool FilterUserCreateOrder(OrdersUser entity)
        {
            return (entity.UserID == this.UserCreateOrderID);
        }
        
        private bool FilterUserOpenOrder(OrdersUser entity)
        {
            return (entity.UserID == this.UserOpenOrderID);
        }
        
        private bool FilterUserReviewOrder(OrdersUser entity)
        {
            return (entity.UserID == this.UserReviewOrderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._orderNumber;
        }
        
        /// <summary>
        /// Invokes the 'RegisterAcceptOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterAcceptOrder(Guid guid)
        {
            this.OnRegisterAcceptOrderInvoking(guid);
            base.InvokeAction("RegisterAcceptOrder", guid);
            this.OnRegisterAcceptOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterBanOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterBanOrder(Guid guid)
        {
            this.OnRegisterBanOrderInvoking(guid);
            base.InvokeAction("RegisterBanOrder", guid);
            this.OnRegisterBanOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterCancelOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterCancelOrder(Guid guid)
        {
            this.OnRegisterCancelOrderInvoking(guid);
            base.InvokeAction("RegisterCancelOrder", guid);
            this.OnRegisterCancelOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterChangeOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterChangeOrder(Guid guid)
        {
            this.OnRegisterChangeOrderInvoking(guid);
            base.InvokeAction("RegisterChangeOrder", guid);
            this.OnRegisterChangeOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterCloseOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterCloseOrder(Guid guid)
        {
            this.OnRegisterCloseOrderInvoking(guid);
            base.InvokeAction("RegisterCloseOrder", guid);
            this.OnRegisterCloseOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterCompleteOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterCompleteOrder(Guid guid)
        {
            this.OnRegisterCompleteOrderInvoking(guid);
            base.InvokeAction("RegisterCompleteOrder", guid);
            this.OnRegisterCompleteOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterNew' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterNew(Guid guid)
        {
            this.OnRegisterNewInvoking(guid);
            base.InvokeAction("RegisterNew", guid);
            this.OnRegisterNewInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterOpenOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void RegisterOpenOrder(Guid guid)
        {
            this.OnRegisterOpenOrderInvoking(guid);
            base.InvokeAction("RegisterOpenOrder", guid);
            this.OnRegisterOpenOrderInvoked();
        }
        
        /// <summary>
        /// Invokes the 'ReloadOrder' action on this entity.
        /// </summary>
        /// <param name="guid">The value to pass to the server method's 'guid' parameter.</param>
        public void ReloadOrder(Guid guid)
        {
            this.OnReloadOrderInvoking(guid);
            base.InvokeAction("ReloadOrder", guid);
            this.OnReloadOrderInvoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.UpdateActionState("RegisterAcceptOrder", "CanRegisterAcceptOrder", "IsRegisterAcceptOrderInvoked");
            base.UpdateActionState("RegisterBanOrder", "CanRegisterBanOrder", "IsRegisterBanOrderInvoked");
            base.UpdateActionState("RegisterCancelOrder", "CanRegisterCancelOrder", "IsRegisterCancelOrderInvoked");
            base.UpdateActionState("RegisterChangeOrder", "CanRegisterChangeOrder", "IsRegisterChangeOrderInvoked");
            base.UpdateActionState("RegisterCloseOrder", "CanRegisterCloseOrder", "IsRegisterCloseOrderInvoked");
            base.UpdateActionState("RegisterCompleteOrder", "CanRegisterCompleteOrder", "IsRegisterCompleteOrderInvoked");
            base.UpdateActionState("RegisterNew", "CanRegisterNew", "IsRegisterNewInvoked");
            base.UpdateActionState("RegisterOpenOrder", "CanRegisterOpenOrder", "IsRegisterOpenOrderInvoked");
            base.UpdateActionState("ReloadOrder", "CanReloadOrder", "IsReloadOrderInvoked");
        }
    }
    
    /// <summary>
    /// The 'OrderObject' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGESOrders.Web.Models")]
    public sealed partial class OrderObject : Entity
    {
        
        private EntityCollection<OrderObject> _childObjects;
        
        private string _fullName;
        
        private int _objectID;
        
        private string _objectName;
        
        private EntityRef<OrderObject> _parentObject;
        
        private int _parentObjectID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnObjectIDChanging(int value);
        partial void OnObjectIDChanged();
        partial void OnObjectNameChanging(string value);
        partial void OnObjectNameChanged();
        partial void OnParentObjectIDChanging(int value);
        partial void OnParentObjectIDChanged();
        partial void OnRegisterChangeObjectInvoking();
        partial void OnRegisterChangeObjectInvoked();
        partial void OnRegisterDeleteObjectInvoking();
        partial void OnRegisterDeleteObjectInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderObject"/> class.
        /// </summary>
        public OrderObject()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OrderObject"/> entities.
        /// </summary>
        [Association("Order_OrderObject2", "ObjectID", "ParentObjectID")]
        public EntityCollection<OrderObject> ChildObjects
        {
            get
            {
                if ((this._childObjects == null))
                {
                    this._childObjects = new EntityCollection<OrderObject>(this, "ChildObjects", this.FilterChildObjects);
                }
                return this._childObjects;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ObjectID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ObjectID
        {
            get
            {
                return this._objectID;
            }
            set
            {
                if ((this._objectID != value))
                {
                    this.OnObjectIDChanging(value);
                    this.ValidateProperty("ObjectID", value);
                    this._objectID = value;
                    this.RaisePropertyChanged("ObjectID");
                    this.OnObjectIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ObjectName' value.
        /// </summary>
        [DataMember()]
        public string ObjectName
        {
            get
            {
                return this._objectName;
            }
            set
            {
                if ((this._objectName != value))
                {
                    this.OnObjectNameChanging(value);
                    this.RaiseDataMemberChanging("ObjectName");
                    this.ValidateProperty("ObjectName", value);
                    this._objectName = value;
                    this.RaiseDataMemberChanged("ObjectName");
                    this.OnObjectNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="OrderObject"/> entity.
        /// </summary>
        [Association("Order_OrderObject1", "ParentObjectID", "ObjectID")]
        public OrderObject ParentObject
        {
            get
            {
                if ((this._parentObject == null))
                {
                    this._parentObject = new EntityRef<OrderObject>(this, "ParentObject", this.FilterParentObject);
                }
                return this._parentObject.Entity;
            }
            set
            {
                OrderObject previous = this.ParentObject;
                if ((previous != value))
                {
                    this.ValidateProperty("ParentObject", value);
                    this._parentObject.Entity = value;
                    this.RaisePropertyChanged("ParentObject");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentObjectID' value.
        /// </summary>
        [DataMember()]
        public int ParentObjectID
        {
            get
            {
                return this._parentObjectID;
            }
            set
            {
                if ((this._parentObjectID != value))
                {
                    this.OnParentObjectIDChanging(value);
                    this.RaiseDataMemberChanging("ParentObjectID");
                    this.ValidateProperty("ParentObjectID", value);
                    this._parentObjectID = value;
                    this.RaiseDataMemberChanged("ParentObjectID");
                    this.OnParentObjectIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterChangeObject' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterChangeObjectInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterChangeObject");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterChangeObject' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterChangeObject
        {
            get
            {
                return base.CanInvokeAction("RegisterChangeObject");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterDeleteObject' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterDeleteObjectInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterDeleteObject");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterDeleteObject' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterDeleteObject
        {
            get
            {
                return base.CanInvokeAction("RegisterDeleteObject");
            }
        }
        
        private bool FilterChildObjects(OrderObject entity)
        {
            return (entity.ParentObjectID == this.ObjectID);
        }
        
        private bool FilterParentObject(OrderObject entity)
        {
            return (entity.ObjectID == this.ParentObjectID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._objectID;
        }
        
        /// <summary>
        /// Invokes the 'RegisterChangeObject' action on this entity.
        /// </summary>
        public void RegisterChangeObject()
        {
            this.OnRegisterChangeObjectInvoking();
            base.InvokeAction("RegisterChangeObject");
            this.OnRegisterChangeObjectInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterDeleteObject' action on this entity.
        /// </summary>
        public void RegisterDeleteObject()
        {
            this.OnRegisterDeleteObjectInvoking();
            base.InvokeAction("RegisterDeleteObject");
            this.OnRegisterDeleteObjectInvoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.UpdateActionState("RegisterChangeObject", "CanRegisterChangeObject", "IsRegisterChangeObjectInvoked");
            base.UpdateActionState("RegisterDeleteObject", "CanRegisterDeleteObject", "IsRegisterDeleteObjectInvoked");
        }
    }
    
    public enum OrderStateEnum
    {
        
        created = 0,
        
        accepted = 1,
        
        banned = 2,
        
        opened = 3,
        
        canceled = 4,
        
        closed = 5,
        
        completed = 6,
        
        completedWithoutEnter = 7,
        
        extended = 8,
        
        askExtended = 9,
    }
    
    /// <summary>
    /// The 'OrdersUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGESOrders.Web.Models")]
    public sealed partial class OrdersUser : Entity
    {
        
        private bool _allowAgreeOrders;
        
        private bool _allowChangeOrder;
        
        private bool _allowCreateCrashOrder;
        
        private bool _allowCreateOrder;
        
        private bool _allowEditTree;
        
        private bool _allowEditUsers;
        
        private bool _allowReviewOrder;
        
        private string _fullName;
        
        private string _mail;
        
        private string _name;
        
        private bool _sendAgreeMail;
        
        private bool _sendAllMail;
        
        private bool _sendCreateMail;
        
        private int _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowAgreeOrdersChanging(bool value);
        partial void OnAllowAgreeOrdersChanged();
        partial void OnAllowChangeOrderChanging(bool value);
        partial void OnAllowChangeOrderChanged();
        partial void OnAllowCreateCrashOrderChanging(bool value);
        partial void OnAllowCreateCrashOrderChanged();
        partial void OnAllowCreateOrderChanging(bool value);
        partial void OnAllowCreateOrderChanged();
        partial void OnAllowEditTreeChanging(bool value);
        partial void OnAllowEditTreeChanged();
        partial void OnAllowEditUsersChanging(bool value);
        partial void OnAllowEditUsersChanged();
        partial void OnAllowReviewOrderChanging(bool value);
        partial void OnAllowReviewOrderChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnMailChanging(string value);
        partial void OnMailChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSendAgreeMailChanging(bool value);
        partial void OnSendAgreeMailChanged();
        partial void OnSendAllMailChanging(bool value);
        partial void OnSendAllMailChanged();
        partial void OnSendCreateMailChanging(bool value);
        partial void OnSendCreateMailChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnRegisterChangeUserInvoking();
        partial void OnRegisterChangeUserInvoked();
        partial void OnRegisterDeleteUserInvoking();
        partial void OnRegisterDeleteUserInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersUser"/> class.
        /// </summary>
        public OrdersUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllowAgreeOrders' value.
        /// </summary>
        [DataMember()]
        public bool AllowAgreeOrders
        {
            get
            {
                return this._allowAgreeOrders;
            }
            set
            {
                if ((this._allowAgreeOrders != value))
                {
                    this.OnAllowAgreeOrdersChanging(value);
                    this.RaiseDataMemberChanging("AllowAgreeOrders");
                    this.ValidateProperty("AllowAgreeOrders", value);
                    this._allowAgreeOrders = value;
                    this.RaiseDataMemberChanged("AllowAgreeOrders");
                    this.OnAllowAgreeOrdersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowChangeOrder' value.
        /// </summary>
        [DataMember()]
        public bool AllowChangeOrder
        {
            get
            {
                return this._allowChangeOrder;
            }
            set
            {
                if ((this._allowChangeOrder != value))
                {
                    this.OnAllowChangeOrderChanging(value);
                    this.RaiseDataMemberChanging("AllowChangeOrder");
                    this.ValidateProperty("AllowChangeOrder", value);
                    this._allowChangeOrder = value;
                    this.RaiseDataMemberChanged("AllowChangeOrder");
                    this.OnAllowChangeOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCreateCrashOrder' value.
        /// </summary>
        [DataMember()]
        public bool AllowCreateCrashOrder
        {
            get
            {
                return this._allowCreateCrashOrder;
            }
            set
            {
                if ((this._allowCreateCrashOrder != value))
                {
                    this.OnAllowCreateCrashOrderChanging(value);
                    this.RaiseDataMemberChanging("AllowCreateCrashOrder");
                    this.ValidateProperty("AllowCreateCrashOrder", value);
                    this._allowCreateCrashOrder = value;
                    this.RaiseDataMemberChanged("AllowCreateCrashOrder");
                    this.OnAllowCreateCrashOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCreateOrder' value.
        /// </summary>
        [DataMember()]
        public bool AllowCreateOrder
        {
            get
            {
                return this._allowCreateOrder;
            }
            set
            {
                if ((this._allowCreateOrder != value))
                {
                    this.OnAllowCreateOrderChanging(value);
                    this.RaiseDataMemberChanging("AllowCreateOrder");
                    this.ValidateProperty("AllowCreateOrder", value);
                    this._allowCreateOrder = value;
                    this.RaiseDataMemberChanged("AllowCreateOrder");
                    this.OnAllowCreateOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowEditTree' value.
        /// </summary>
        [DataMember()]
        public bool AllowEditTree
        {
            get
            {
                return this._allowEditTree;
            }
            set
            {
                if ((this._allowEditTree != value))
                {
                    this.OnAllowEditTreeChanging(value);
                    this.RaiseDataMemberChanging("AllowEditTree");
                    this.ValidateProperty("AllowEditTree", value);
                    this._allowEditTree = value;
                    this.RaiseDataMemberChanged("AllowEditTree");
                    this.OnAllowEditTreeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowEditUsers' value.
        /// </summary>
        [DataMember()]
        public bool AllowEditUsers
        {
            get
            {
                return this._allowEditUsers;
            }
            set
            {
                if ((this._allowEditUsers != value))
                {
                    this.OnAllowEditUsersChanging(value);
                    this.RaiseDataMemberChanging("AllowEditUsers");
                    this.ValidateProperty("AllowEditUsers", value);
                    this._allowEditUsers = value;
                    this.RaiseDataMemberChanged("AllowEditUsers");
                    this.OnAllowEditUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowReviewOrder' value.
        /// </summary>
        [DataMember()]
        public bool AllowReviewOrder
        {
            get
            {
                return this._allowReviewOrder;
            }
            set
            {
                if ((this._allowReviewOrder != value))
                {
                    this.OnAllowReviewOrderChanging(value);
                    this.RaiseDataMemberChanging("AllowReviewOrder");
                    this.ValidateProperty("AllowReviewOrder", value);
                    this._allowReviewOrder = value;
                    this.RaiseDataMemberChanged("AllowReviewOrder");
                    this.OnAllowReviewOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Mail' value.
        /// </summary>
        [DataMember()]
        public string Mail
        {
            get
            {
                return this._mail;
            }
            set
            {
                if ((this._mail != value))
                {
                    this.OnMailChanging(value);
                    this.RaiseDataMemberChanging("Mail");
                    this.ValidateProperty("Mail", value);
                    this._mail = value;
                    this.RaiseDataMemberChanged("Mail");
                    this.OnMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SendAgreeMail' value.
        /// </summary>
        [DataMember()]
        public bool SendAgreeMail
        {
            get
            {
                return this._sendAgreeMail;
            }
            set
            {
                if ((this._sendAgreeMail != value))
                {
                    this.OnSendAgreeMailChanging(value);
                    this.RaiseDataMemberChanging("SendAgreeMail");
                    this.ValidateProperty("SendAgreeMail", value);
                    this._sendAgreeMail = value;
                    this.RaiseDataMemberChanged("SendAgreeMail");
                    this.OnSendAgreeMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SendAllMail' value.
        /// </summary>
        [DataMember()]
        public bool SendAllMail
        {
            get
            {
                return this._sendAllMail;
            }
            set
            {
                if ((this._sendAllMail != value))
                {
                    this.OnSendAllMailChanging(value);
                    this.RaiseDataMemberChanging("SendAllMail");
                    this.ValidateProperty("SendAllMail", value);
                    this._sendAllMail = value;
                    this.RaiseDataMemberChanged("SendAllMail");
                    this.OnSendAllMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SendCreateMail' value.
        /// </summary>
        [DataMember()]
        public bool SendCreateMail
        {
            get
            {
                return this._sendCreateMail;
            }
            set
            {
                if ((this._sendCreateMail != value))
                {
                    this.OnSendCreateMailChanging(value);
                    this.RaiseDataMemberChanging("SendCreateMail");
                    this.ValidateProperty("SendCreateMail", value);
                    this._sendCreateMail = value;
                    this.RaiseDataMemberChanged("SendCreateMail");
                    this.OnSendCreateMailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaisePropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterChangeUser' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterChangeUserInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterChangeUser");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterChangeUser' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterChangeUser
        {
            get
            {
                return base.CanInvokeAction("RegisterChangeUser");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterDeleteUser' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsRegisterDeleteUserInvoked
        {
            get
            {
                return base.IsActionInvoked("RegisterDeleteUser");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'RegisterDeleteUser' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanRegisterDeleteUser
        {
            get
            {
                return base.CanInvokeAction("RegisterDeleteUser");
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._userID;
        }
        
        /// <summary>
        /// Invokes the 'RegisterChangeUser' action on this entity.
        /// </summary>
        public void RegisterChangeUser()
        {
            this.OnRegisterChangeUserInvoking();
            base.InvokeAction("RegisterChangeUser");
            this.OnRegisterChangeUserInvoked();
        }
        
        /// <summary>
        /// Invokes the 'RegisterDeleteUser' action on this entity.
        /// </summary>
        public void RegisterDeleteUser()
        {
            this.OnRegisterDeleteUserInvoking();
            base.InvokeAction("RegisterDeleteUser");
            this.OnRegisterDeleteUserInvoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.UpdateActionState("RegisterChangeUser", "CanRegisterChangeUser", "IsRegisterChangeUserInvoked");
            base.UpdateActionState("RegisterDeleteUser", "CanRegisterDeleteUser", "IsRegisterDeleteUserInvoked");
        }
    }
    
    public enum OrderTypeEnum
    {
        
        pl = 0,
        
        npl = 1,
        
        no = 2,
        
        crash = 3,
    }
}
namespace VotGESOrders.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using VotGESOrders.Web.Models;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationDomainService' domain service.
    /// </summary>
    public sealed partial class AuthenticationDomainContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationDomainContext"/> class.
        /// </summary>
        public AuthenticationDomainContext() : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(new Uri("VotGESOrders-Web-Services-AuthenticationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationDomainService service URI.</param>
        public AuthenticationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationDomainContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/GetUser", ReplyAction="http://tempuri.org/AuthenticationDomainService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Login", ReplyAction="http://tempuri.org/AuthenticationDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/Logout", ReplyAction="http://tempuri.org/AuthenticationDomainService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationDomainContextEntityContainer : EntityContainer
        {
            
            public AuthenticationDomainContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'LoggerService' domain service.
    /// </summary>
    public sealed partial class LoggerContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoggerContext"/> class.
        /// </summary>
        public LoggerContext() : 
                this(new WebDomainClient<ILoggerServiceContract>(new Uri("VotGESOrders-Web-Services-LoggerService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoggerContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LoggerService service URI.</param>
        public LoggerContext(Uri serviceUri) : 
                this(new WebDomainClient<ILoggerServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LoggerContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public LoggerContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'debug' method of the domain service.
        /// </summary>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation debug(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("debug", parameters);
            return this.InvokeOperation("debug", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'debug' method of the domain service.
        /// </summary>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation debug(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("debug", parameters);
            return this.InvokeOperation("debug", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'error' method of the domain service.
        /// </summary>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation error(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("error", parameters);
            return this.InvokeOperation("error", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'error' method of the domain service.
        /// </summary>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation error(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("error", parameters);
            return this.InvokeOperation("error", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'info' method of the domain service.
        /// </summary>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation info(string message, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("info", parameters);
            return this.InvokeOperation("info", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'info' method of the domain service.
        /// </summary>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation info(string message)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("message", message);
            this.ValidateMethod("info", parameters);
            return this.InvokeOperation("info", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LoggerContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LoggerService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ILoggerServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'debug' operation.
            /// </summary>
            /// <param name="message">The value for the 'message' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/debugDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/debug", ReplyAction="http://tempuri.org/LoggerService/debugResponse")]
            IAsyncResult Begindebug(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'Begindebug'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'Begindebug'.</param>
            void Enddebug(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'error' operation.
            /// </summary>
            /// <param name="message">The value for the 'message' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/errorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/error", ReplyAction="http://tempuri.org/LoggerService/errorResponse")]
            IAsyncResult Beginerror(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'Beginerror'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'Beginerror'.</param>
            void Enderror(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'info' operation.
            /// </summary>
            /// <param name="message">The value for the 'message' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/infoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/info", ReplyAction="http://tempuri.org/LoggerService/infoResponse")]
            IAsyncResult Begininfo(string message, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'Begininfo'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'Begininfo'.</param>
            void Endinfo(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LoggerService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LoggerService/SubmitChanges", ReplyAction="http://tempuri.org/LoggerService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class LoggerContextEntityContainer : EntityContainer
        {
            
            public LoggerContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'OrdersDomainService' domain service.
    /// </summary>
    public sealed partial class OrdersDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersDomainContext"/> class.
        /// </summary>
        public OrdersDomainContext() : 
                this(new WebDomainClient<IOrdersDomainServiceContract>(new Uri("VotGESOrders-Web-Services-OrdersDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The OrdersDomainService service URI.</param>
        public OrdersDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IOrdersDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public OrdersDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Order"/> entities that have been loaded into this <see cref="OrdersDomainContext"/> instance.
        /// </summary>
        public EntitySet<Order> Orders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Order>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OrderObject"/> entities that have been loaded into this <see cref="OrdersDomainContext"/> instance.
        /// </summary>
        public EntitySet<OrderObject> OrderObjects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OrderObject>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OrdersUser"/> entities that have been loaded into this <see cref="OrdersDomainContext"/> instance.
        /// </summary>
        public EntitySet<OrdersUser> OrdersUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OrdersUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order"/> entities using the 'GetFilteredOrdersFromXML' query.
        /// </summary>
        /// <param name="xml">The value for the 'xml' parameter of the query.</param>
        /// <param name="guid">The value for the 'guid' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order"/> entities.</returns>
        public EntityQuery<Order> GetFilteredOrdersFromXMLQuery(string xml, Guid guid)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("xml", xml);
            parameters.Add("guid", guid);
            this.ValidateMethod("GetFilteredOrdersFromXMLQuery", parameters);
            return base.CreateQuery<Order>("GetFilteredOrdersFromXML", parameters, true, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OrderObject"/> entities using the 'LoadOrderObjects' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OrderObject"/> entities.</returns>
        public EntityQuery<OrderObject> LoadOrderObjectsQuery()
        {
            this.ValidateMethod("LoadOrderObjectsQuery", null);
            return base.CreateQuery<OrderObject>("LoadOrderObjects", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Order"/> entities using the 'LoadOrders' query.
        /// </summary>
        /// <param name="guid">The value for the 'guid' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Order"/> entities.</returns>
        public EntityQuery<Order> LoadOrdersQuery(Guid guid)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("guid", guid);
            this.ValidateMethod("LoadOrdersQuery", parameters);
            return base.CreateQuery<Order>("LoadOrders", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OrdersUser"/> entities using the 'LoadOrdersUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OrdersUser"/> entities.</returns>
        public EntityQuery<OrdersUser> LoadOrdersUsersQuery()
        {
            this.ValidateMethod("LoadOrdersUsersQuery", null);
            return base.CreateQuery<OrdersUser>("LoadOrdersUsers", null, false, true);
        }
        
        /// <summary>
        /// Invokes the 'RegisterNew' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterNew(Order order, Guid guid)
        {
            order.RegisterNew(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterChangeOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterChangeOrder(Order order, Guid guid)
        {
            order.RegisterChangeOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterAcceptOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterAcceptOrder(Order order, Guid guid)
        {
            order.RegisterAcceptOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterBanOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterBanOrder(Order order, Guid guid)
        {
            order.RegisterBanOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterCancelOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterCancelOrder(Order order, Guid guid)
        {
            order.RegisterCancelOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterOpenOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterOpenOrder(Order order, Guid guid)
        {
            order.RegisterOpenOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterCloseOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterCloseOrder(Order order, Guid guid)
        {
            order.RegisterCloseOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterCompleteOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void RegisterCompleteOrder(Order order, Guid guid)
        {
            order.RegisterCompleteOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'ReloadOrder' method of the specified <see cref="Order"/> entity.
        /// </summary>
        /// <param name="order">The <see cref="Order"/> entity instance.</param>
        /// <param name="guid">The value for the 'guid' parameter for this action.</param>
        public void ReloadOrder(Order order, Guid guid)
        {
            order.ReloadOrder(guid);
        }
        
        /// <summary>
        /// Invokes the 'RegisterChangeObject' method of the specified <see cref="OrderObject"/> entity.
        /// </summary>
        /// <param name="newObject">The <see cref="OrderObject"/> entity instance.</param>
        public void RegisterChangeObject(OrderObject newObject)
        {
            newObject.RegisterChangeObject();
        }
        
        /// <summary>
        /// Invokes the 'RegisterDeleteObject' method of the specified <see cref="OrderObject"/> entity.
        /// </summary>
        /// <param name="newObject">The <see cref="OrderObject"/> entity instance.</param>
        public void RegisterDeleteObject(OrderObject newObject)
        {
            newObject.RegisterDeleteObject();
        }
        
        /// <summary>
        /// Invokes the 'RegisterChangeUser' method of the specified <see cref="OrdersUser"/> entity.
        /// </summary>
        /// <param name="newObject">The <see cref="OrdersUser"/> entity instance.</param>
        public void RegisterChangeUser(OrdersUser newObject)
        {
            newObject.RegisterChangeUser();
        }
        
        /// <summary>
        /// Invokes the 'RegisterDeleteUser' method of the specified <see cref="OrdersUser"/> entity.
        /// </summary>
        /// <param name="newObject">The <see cref="OrdersUser"/> entity instance.</param>
        public void RegisterDeleteUser(OrdersUser newObject)
        {
            newObject.RegisterDeleteUser();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ExistsChanges' method of the domain service.
        /// </summary>
        /// <param name="guid">The value for the 'guid' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ExistsChanges(Guid guid, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("guid", guid);
            this.ValidateMethod("ExistsChanges", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ExistsChanges", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ExistsChanges' method of the domain service.
        /// </summary>
        /// <param name="guid">The value for the 'guid' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ExistsChanges(Guid guid)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("guid", guid);
            this.ValidateMethod("ExistsChanges", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ExistsChanges", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OrdersDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'OrdersDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        [ServiceKnownType(typeof(Guid))]
        public interface IOrdersDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'ExistsChanges' operation.
            /// </summary>
            /// <param name="guid">The value for the 'guid' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrdersDomainService/ExistsChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrdersDomainService/ExistsChanges", ReplyAction="http://tempuri.org/OrdersDomainService/ExistsChangesResponse")]
            IAsyncResult BeginExistsChanges(Guid guid, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginExistsChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginExistsChanges'.</param>
            /// <returns>The 'Boolean' returned from the 'ExistsChanges' operation.</returns>
            bool EndExistsChanges(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilteredOrdersFromXML' operation.
            /// </summary>
            /// <param name="xml">The value for the 'xml' parameter of this action.</param>
            /// <param name="guid">The value for the 'guid' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrdersDomainService/GetFilteredOrdersFromXMLDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrdersDomainService/GetFilteredOrdersFromXML", ReplyAction="http://tempuri.org/OrdersDomainService/GetFilteredOrdersFromXMLResponse")]
            IAsyncResult BeginGetFilteredOrdersFromXML(string xml, Guid guid, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilteredOrdersFromXML'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilteredOrdersFromXML'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilteredOrdersFromXML' operation.</returns>
            QueryResult<Order> EndGetFilteredOrdersFromXML(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadOrderObjects' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrdersDomainService/LoadOrderObjectsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrdersDomainService/LoadOrderObjects", ReplyAction="http://tempuri.org/OrdersDomainService/LoadOrderObjectsResponse")]
            [WebGet()]
            IAsyncResult BeginLoadOrderObjects(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadOrderObjects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadOrderObjects'.</param>
            /// <returns>The 'QueryResult' returned from the 'LoadOrderObjects' operation.</returns>
            QueryResult<OrderObject> EndLoadOrderObjects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadOrders' operation.
            /// </summary>
            /// <param name="guid">The value for the 'guid' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrdersDomainService/LoadOrdersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrdersDomainService/LoadOrders", ReplyAction="http://tempuri.org/OrdersDomainService/LoadOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginLoadOrders(Guid guid, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'LoadOrders' operation.</returns>
            QueryResult<Order> EndLoadOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadOrdersUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrdersDomainService/LoadOrdersUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrdersDomainService/LoadOrdersUsers", ReplyAction="http://tempuri.org/OrdersDomainService/LoadOrdersUsersResponse")]
            [WebGet()]
            IAsyncResult BeginLoadOrdersUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadOrdersUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadOrdersUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'LoadOrdersUsers' operation.</returns>
            QueryResult<OrdersUser> EndLoadOrdersUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrdersDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrdersDomainService/SubmitChanges", ReplyAction="http://tempuri.org/OrdersDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class OrdersDomainContextEntityContainer : EntityContainer
        {
            
            public OrdersDomainContextEntityContainer()
            {
                this.CreateEntitySet<Order>(EntitySetOperations.Edit);
                this.CreateEntitySet<OrderObject>(EntitySetOperations.Edit);
                this.CreateEntitySet<OrdersUser>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/VotGESOrders.Web.Services")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private bool _allowCreateCrashOrder;
        
        private bool _allowCreateOrder;
        
        private bool _allowEditTree;
        
        private bool _allowEditUsers;
        
        private string _fullName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        private int _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowCreateCrashOrderChanging(bool value);
        partial void OnAllowCreateCrashOrderChanged();
        partial void OnAllowCreateOrderChanging(bool value);
        partial void OnAllowCreateOrderChanged();
        partial void OnAllowEditTreeChanging(bool value);
        partial void OnAllowEditTreeChanged();
        partial void OnAllowEditUsersChanging(bool value);
        partial void OnAllowEditUsersChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCreateCrashOrder' value.
        /// </summary>
        [DataMember()]
        public bool AllowCreateCrashOrder
        {
            get
            {
                return this._allowCreateCrashOrder;
            }
            set
            {
                if ((this._allowCreateCrashOrder != value))
                {
                    this.OnAllowCreateCrashOrderChanging(value);
                    this.RaiseDataMemberChanging("AllowCreateCrashOrder");
                    this.ValidateProperty("AllowCreateCrashOrder", value);
                    this._allowCreateCrashOrder = value;
                    this.RaiseDataMemberChanged("AllowCreateCrashOrder");
                    this.OnAllowCreateCrashOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowCreateOrder' value.
        /// </summary>
        [DataMember()]
        public bool AllowCreateOrder
        {
            get
            {
                return this._allowCreateOrder;
            }
            set
            {
                if ((this._allowCreateOrder != value))
                {
                    this.OnAllowCreateOrderChanging(value);
                    this.RaiseDataMemberChanging("AllowCreateOrder");
                    this.ValidateProperty("AllowCreateOrder", value);
                    this._allowCreateOrder = value;
                    this.RaiseDataMemberChanged("AllowCreateOrder");
                    this.OnAllowCreateOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowEditTree' value.
        /// </summary>
        [DataMember()]
        public bool AllowEditTree
        {
            get
            {
                return this._allowEditTree;
            }
            set
            {
                if ((this._allowEditTree != value))
                {
                    this.OnAllowEditTreeChanging(value);
                    this.RaiseDataMemberChanging("AllowEditTree");
                    this.ValidateProperty("AllowEditTree", value);
                    this._allowEditTree = value;
                    this.RaiseDataMemberChanged("AllowEditTree");
                    this.OnAllowEditTreeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllowEditUsers' value.
        /// </summary>
        [DataMember()]
        public bool AllowEditUsers
        {
            get
            {
                return this._allowEditUsers;
            }
            set
            {
                if ((this._allowEditUsers != value))
                {
                    this.OnAllowEditUsersChanging(value);
                    this.RaiseDataMemberChanging("AllowEditUsers");
                    this.ValidateProperty("AllowEditUsers", value);
                    this._allowEditUsers = value;
                    this.RaiseDataMemberChanged("AllowEditUsers");
                    this.OnAllowEditUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullName' value.
        /// </summary>
        [DataMember()]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public int UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
